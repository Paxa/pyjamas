{"name":"Pyjamas","tagline":"A BDD assertion library for D","body":"pyjamas\r\n=======\r\n[![Build Status](https://travis-ci.org/yamadapc/pyjamas.svg)](https://travis-ci.org/yamadapc/pyjamas)\r\n[![Gitter chat](https://badges.gitter.im/yamadapc/pyjamas.png)](https://gitter.im/yamadapc/pyjamas)\r\n- - -\r\n\r\n<img src=\"https://raw.githubusercontent.com/yamadapc/pyjamas/master/logo-big.png\"/>\r\n<br />\r\nA BDD assertion library for D.\r\n\r\n## Example\r\n```d\r\nimport pyjamas;\r\n\r\n10.should.equal(10);\r\n5.should.not.equal(10);\r\n[1, 2, 3, 4].should.include(3);\r\n```\r\n\r\n## Introduction\r\n\r\nPyjamas is an assertion library heavily inspired by [visionmedia'Å›\r\nshould.js](https://github.com/visionmedia/should.js) module for Node.JS.\r\n\r\n## General Assertions\r\n\r\nPyjamas exports a single function `should` meant for public use. Because of D's\r\nlookup shortcut syntax, one is able to use both `should(obj)` and `obj.should`\r\nto get an object wrapped around an `Assertion` instance.\r\n\r\n### `Assertion not()`\r\n\r\nThis function negates the wrapper assertion. With it, one can express fluent\r\nassertions without much effort:\r\n```d\r\n10.should.not.equal(2);\r\n```\r\n\r\n### `T equal(U)(U other, string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts for equality between two objects. Returns the value wrapped around the\r\nassertion.\r\n```d\r\n[1, 2, 3, 4].should.equal([1, 2, 3, 4]);\r\n255.should.equal(10); // Throws an Exception \"expected 255 to equal 10\"\r\n```\r\n\r\n### `T exist(string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts whether a value exists - currently simply compares it with `null`, if it\r\nis convertible to `null`. Returns the value wrapped around the assertion.\r\n```d\r\nauto exists = \"I exist!\";\r\nshould(exists).exist;\r\nstring doesntexist;\r\nstr.should.exist; // Throws an Exception \"expected null to exist\"\r\n```\r\n\r\n### `bool biggerThan(U)(U other, string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts if a value is bigger than another value. Returns the result.\r\n```d\r\n\"z\".should.be.biggerThan(\"a\");\r\n10.should.be.biggerThan(1);\r\n```\r\n\r\n### `bool smallerThan(U)(U other, string file = __FILE__, size_t line = __LINE__)`\r\n\r\nAsserts if a value is smaller than another value. Returns the result.\r\n```d\r\n10.should.be.smallerThan(100);\r\nfalse.should.be.smallerThan(true);\r\n```\r\n\r\n### `U include(U)(U other, string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts for an input range wrapped around an `Assertion` to contain/include a\r\nvalue.\r\n```d\r\n[1, 2, 3, 4].should.include(3);\r\n\"something\".should.not.include('o');\r\n\"something\".should.include(\"th\");\r\n```\r\n\r\n### `U length(U)(U length, string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts for the `.length` property or function value to equal some value.\r\n```d\r\n[1, 2, 3, 4].should.have.length(4);\r\n\"abcdefg\".should.have.length(0);\r\n// ^^ - Throws an Exception \"expected 'abcdefg' to have length of 0\"\r\n```\r\n\r\n### `auto match(RegEx)(RegEx re, string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts for a string wrapped around the Assertion to match a regular expression.\r\n```d\r\n\"something weird\".match(`[a-z]+`);\r\n\"something weird\".match(regex(`[a-z]+`));\r\n\"something 2 weird\".should.not.match(ctRegex!`^[a-z]+$`));\r\n\"1234numbers\".match(`[0-9]+[a-z]+`);\r\n\"1234numbers\".not.match(`^[a-z]+`);\r\n```\r\n\r\n### `bool True(string file = __FILE__, size_t = line = __LINE__);` and `.False`\r\n\r\nBoth functions have the same signature.\r\nAsserts for a boolean value to be equal to `true` or to ``false`.`\r\n```d\r\ntrue.should.be.True;\r\nfalse.should.be.False;\r\n```\r\n\r\n### `bool sorted(strinf file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts whether a forward range is sorted.\r\n```d\r\n[1, 2, 3, 4].should.be.sorted;\r\n[1, 2, 0, 4].should.not.be.sorted;\r\n```\r\n\r\n### `void Throw(T : Throwable)(string file = __FILE__, size_t line = __LINE__);`\r\n\r\nAsserts whether a callable object wrapped around the assertion throws an\r\nexception of type T.\r\n```d\r\nvoid throwing()\r\n{\r\n  throw new Exception(\"I throw with 0!\");\r\n}\r\n\r\nshould(&throwing).Throw!Exception;\r\n\r\nvoid notThrowing()\r\n{\r\n  return;\r\n}\r\n\r\nshould(&notThrowing).not.Throw;\r\n```\r\n\r\n### `.be` `.as` `.of` `.a` `.and` `.have` `.which`\r\n\r\nThese methods all are aliases for an identity function, returning the assertion\r\ninstance without modification. This allows one to have a more fluent API, by\r\nchaining statements together:\r\n```d\r\n10.should.be.equal(10);\r\n[1, 2, 3, 4].should.have.length(4);\r\n```\r\n\r\n## Need more documentation?\r\n\r\nI know the documentation is still somewhat lacking, but it's better than\r\nnothing, I guess? :)\r\n\r\nTry looking at the test suite in [`test/pyjamas_test.d`](/test/pyjamas_test.d)\r\nto see some \"real world\" testing of the library. Even though I'm using my\r\ntesting framework [`bed`](https://github.com/yamadapc/bed), this library is\r\nsupposed to be framework agnostic (you can use it with `unittest` if you want).\r\n\r\nBTW, I'll be glad to accept help in writting the documentation.\r\n\r\n## Tests\r\n\r\nRun tests with:\r\n```\r\ndub --config=test\r\n```\r\n\r\n## License\r\n\r\nThis code is licensed under the GPLv3 license. See the [LICENSE](LICENSE) file\r\nfor more information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}